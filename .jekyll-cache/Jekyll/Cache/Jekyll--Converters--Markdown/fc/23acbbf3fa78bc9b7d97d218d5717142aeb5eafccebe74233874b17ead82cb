I"7<h3 id="db">DB?</h3>

<ul>
  <li>DBMS(Database Management System)</li>
  <li>Available for Multiple User</li>
</ul>

<h3 id="db-사용-이전">DB 사용 이전</h3>

<ul>
  <li>파일 시스템에서 직접 프로그래밍</li>
  <li>중복된 데이터가 발생하고 데이터의 일관성이 떨어짐</li>
  <li>데이터 접근, 처리가 어려움(DB와 달리 명령어를 직접 작성해야 함)</li>
  <li>여러 파일과 포맷이 나타남</li>
  <li>제약 조건을 추가하거나 변경이 어려움</li>
  <li>동시 접근 불가</li>
  <li>작업 도중 에러 발생 시 에러 처리 어려움</li>
</ul>

<h3 id="db의-목적">DB의 목적</h3>

<ul>
  <li>데이터 중복 방지, 일관성 유지</li>
  <li>데이터 접근을 쉽게</li>
  <li>데이터 조건 변경을 쉽게</li>
  <li>수정의 원자성(작업 도중 에러 발생 시 에러 처리)</li>
  <li>동시 접근</li>
  <li>보안성</li>
</ul>

<h3 id="데이터-모델">데이터 모델</h3>

<ul>
  <li>관계형 모델</li>
  <li>객체지향형 모델</li>
  <li>네트워크 모델</li>
  <li>상속형 모델</li>
  <li>etc.</li>
</ul>

<h3 id="관계형-모델">관계형 모델</h3>

<ul>
  <li>테이블을 이용해서 데이터 저장</li>
</ul>

<h3 id="추상화-수준">추상화 수준</h3>

<ul>
  <li>Physical Level: 어떻게 레코드가 저장되는지</li>
  <li>Logical Level: 데이터가 저장되어 있는 형태(관계)</li>
  <li>View Level: 세부 데이터는 숨긴 채 보여지는 부분</li>
</ul>

<h3 id="스키마">스키마</h3>

<p><em>스키마: 테이블 이름, 인덱스 이름</em></p>

<ul>
  <li>Logical Schema: 모든 테이블</li>
  <li>Physical Schema: 물리적인 구조(파일 구조)</li>
  <li>Instance: 입력된 데이터</li>
</ul>

<h3 id="physical-data-independence">Physical Data Independence</h3>

<ul>
  <li>물리적인 스키마를 바꿔도 프로그램에는 영향을 주지 않음</li>
  <li>데이터를 추가하거나 변경해도 프로그램에는 영향을 주지 않는다</li>
</ul>

<h3 id="ddl-data-definition-language">DDL (Data Definition Language)</h3>

<ul>
  <li>스키마를 정의하는 명령어</li>
  <li>create table</li>
  <li>DDL 컴파일러가 Data Dictionary에 해당 테이블(스키마)에 대한 메타데이터(db스키마 – 구조, 고유번호, 접근권한 등) 저장</li>
</ul>

<h3 id="dml-data-manipulation-language">DML (Data manipulation Language)</h3>

<ul>
  <li>데이터에 직접 접근하거나 수정하는 명령어</li>
  <li>aka 쿼리문</li>
  <li><strong>Procedural DML</strong> - 어떻게 데이터 가져올 것인지 명시해야 함</li>
  <li><strong>Declarative DML</strong> - 데이터 획득 방법 명시 없음
    <ul>
      <li>ex) SELECT x FROM t WHERE x &gt; 100</li>
    </ul>
  </li>
  <li>선언적 형태가 더 쉬움</li>
</ul>

<h3 id="sql-query-language">SQL Query Language</h3>

<ul>
  <li>non-procedual한 언어</li>
  <li>SELECT name FROM table WHERE condition</li>
  <li>일반 프로그래밍 언어는 아님</li>
</ul>

<h3 id="db-디자인">DB 디자인</h3>

<ul>
  <li>Logical Design - 필요한 필드를 설계</li>
  <li>physical Design - 물리적 구조를 결정</li>
</ul>

<h3 id="database-engine">Database Engine</h3>

<ul>
  <li>storage manager</li>
  <li>query processor</li>
  <li>transaction management</li>
</ul>

<h3 id="storage-manager">Storage Manager</h3>

<ul>
  <li>OS를 통해 저장, 인출, 업데이트</li>
  <li>Authorization, Integriry(무결성) 관리</li>
  <li>데이터, 데이터 딕셔너리(메타데이터 자정), 인덱스</li>
</ul>

<h3 id="query-processor">Query Processor</h3>

<ul>
  <li>DDL - 정의 메소드</li>
  <li>DML - 질의 메소드</li>
  <li>메소드 실행</li>
</ul>

<h3 id="transaction-management">Transaction Management</h3>

<ul>
  <li>오류 제어</li>
  <li>동시성 제어</li>
</ul>

<h3 id="db-arrchitecture">DB Arrchitecture</h3>

<ul>
  <li>Centrailized</li>
  <li>Client-Server</li>
  <li>Parallel</li>
  <li>Distributed</li>
</ul>

<h3 id="db-applications">DB Applications</h3>

<ul>
  <li>Two-tier - 유저가 어플리케이션을 가짐</li>
  <li>Three-tier - 서버에 어플리케이션 서버를 두어 클라이언트가 가진 어플리케이션 클라이언트의 크기를 줄임</li>
</ul>

<h3 id="db-users">DB Users</h3>

<ul>
  <li>이용자</li>
  <li>개발자</li>
  <li>관리자</li>
  <li>분석가</li>
</ul>

<h3 id="관리자">관리자</h3>

<ul>
  <li>스키마 정의</li>
  <li>구조, 접근 방법 정의</li>
  <li>수정</li>
  <li>인증</li>
  <li>유지 보수</li>
  <li>백업</li>
  <li>모니터</li>
</ul>

<h3 id="db-역사">DB 역사</h3>

<ul>
  <li>50s ~ early 60s
    <ul>
      <li>마그네틱 테이프</li>
      <li>천공 카드</li>
    </ul>
  </li>
  <li>60s ~ 70s
    <ul>
      <li>하드 디스크(직접 접근)</li>
      <li>관계형 DB</li>
    </ul>
  </li>
  <li>80s
    <ul>
      <li>SQL이 표준화</li>
      <li>분산, 병렬, 객체지향</li>
    </ul>
  </li>
  <li>90s
    <ul>
      <li>DB 분석(마이닝)</li>
    </ul>
  </li>
  <li>00s
    <ul>
      <li>빅데이터
        <ul>
          <li>NoSQL</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>10s
    <ul>
      <li>SQL front end to Map Reduce</li>
      <li>거대한 병렬 DB</li>
      <li>메인 메모리를 DB로 활용</li>
    </ul>
  </li>
</ul>
:ET